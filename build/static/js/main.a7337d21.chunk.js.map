{"version":3,"sources":["components/AnswersGroup/AnswerGroup.ts","components/AnswersGroup/RadioGroup.tsx","components/AnswersGroup/CheckboxesGroup.tsx","components/shared/Card.ts","components/shared/DifficultIcon.tsx","components/Question/Question.tsx","components/Results/QuestionResultsProvider/QuestionResult.ts","components/Results/QuestionResultsProvider/QuestionResultsProvider.ts","components/Results/ResultsInfo.tsx","components/Results/Results.tsx","store/actions.ts","components/Questionnaire.tsx","App.tsx","store/state.ts","store/store.ts","store/reducer.ts","index.tsx"],"names":["AnswerText","styled","span","props","correct","AnswersRadioGroup","answers","onInput","value","correctAnswers","RadioGroup","onChange","event","answer","map","Radio","includes","onHandleChange","handleChange","key","checked","concat","filter","item","CheckboxesGroup","bind","Checkbox","Card","div","isCorrect","iconsByDifficult","easy","icon","InsertEmoticonIcon","color","medium","SentimentSatisfiedIcon","hard","MoodBadIcon","DifficultIcon","difficulty","Icon","htmlColor","Content","ControlPanel","QuestionText","p","Question","question","onSelected","selectedAnswers","AnswerGroup","type","incorrect_answers","correct_answer","sort","QuestionResult","result","this","length","QuestionResultsProvider","data","results","questions","i","aResult","bResult","aDifficulty","bDifficulty","getResults","reduce","info","incorrect","ResultRow","Result","getResultInfo","resultProvider","getInfo","total","percent","Math","round","ResultsInfo","Results","resultsProvider","SET_QUESTIONS","Symbol","ADD_ANSWER","mapDispatchToProps","fetchQuestions","dispatch","a","axios","get","payload","addAnswer","connect","isLoading","fetch","onSubmit","useState","setSelectedAnswers","useEffect","CircularProgress","size","Button","variant","fullWidth","onClick","disabled","Container","App","state","store","createStore","defaultState","action","applyMiddleware","thunk","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7337d21.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nexport interface IOnInputAnswer {\n    // eslint-disable-next-line no-unused-vars\n    (value: string[]): void\n}\n\nexport interface IAnswerGroupProps {\n    answers: string[]\n    value: string[]\n    onInput: IOnInputAnswer\n    correctAnswers: string[] | null\n}\n\nexport interface IAnswerGroup {\n    // eslint-disable-next-line no-unused-vars\n    (props: IAnswerGroupProps): React.ReactElement;\n}\n\ninterface IAnswerTextProps {\n    correct: boolean\n}\n\nexport const AnswerText = styled.span`\ncolor: ${(props: IAnswerTextProps) => (props.correct ? 'green' : 'inherit')};\n`;\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { IAnswerGroup, IAnswerGroupProps, AnswerText } from './AnswerGroup';\n\nconst AnswersRadioGroup: IAnswerGroup = (props : IAnswerGroupProps) => {\n  const {\n    answers,\n    onInput,\n    value,\n    correctAnswers,\n  } = props;\n  return (\n    <RadioGroup\n      value={value[0] || null}\n      onChange={(event, answer) => onInput([answer])}\n    >\n      { answers.map((answer) => (\n        <div\n          key={answer}\n        >\n          <Radio\n            value={answer}\n          />\n          <AnswerText\n            correct={correctAnswers ? correctAnswers.includes(answer) : false}\n          >\n            {answer}\n          </AnswerText>\n        </div>\n      )) }\n    </RadioGroup>\n  );\n};\n\nexport default AnswersRadioGroup;\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport { IAnswerGroup, IAnswerGroupProps, AnswerText } from './AnswerGroup';\n\nconst onHandleChange = (handleChange: Function, value: string[], key: string, checked: boolean) => {\n  if (checked) {\n    handleChange(value.concat(key));\n  } else {\n    handleChange(value.filter((item: string) => item !== key));\n  }\n};\n\nconst CheckboxesGroup: IAnswerGroup = (props: IAnswerGroupProps) => {\n  const {\n    answers, value, onInput, correctAnswers = [],\n  } = props;\n  const onChange = onHandleChange.bind(null, onInput, value);\n  return (\n    <div>\n      {\n        answers.map(\n          (answer: string) => (\n            <div\n              key={answer}\n            >\n              <Checkbox\n                checked={value.includes(answer)}\n                onChange={(event, checked) => { onChange(answer, checked); }}\n              />\n              <AnswerText\n                correct={correctAnswers ? correctAnswers.includes(answer) : false}\n              >\n                {answer}\n              </AnswerText>\n            </div>\n          ),\n        )\n      }\n    </div>\n  );\n};\n\nexport default CheckboxesGroup;\n","import styled from 'styled-components';\n\ninterface ICardProps {\n    isCorrect: boolean | null;\n}\n\nconst Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-around;\n  width: 500px;\n  padding: 10px;\n  box-shadow: 4px 4px 8px 0px rgba(34, 60, 80, 0.2);\n  border-left: ${({ isCorrect }:ICardProps) => {\n    if (isCorrect === null) return 'none';\n    if (isCorrect) return '2px solid green';\n    return '2px solid red';\n  }};\n`;\n\nexport default Card;\n","import React from 'react';\nimport { OverridableComponent } from '@material-ui/core/OverridableComponent';\nimport { SvgIconTypeMap } from '@material-ui/core';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport SentimentSatisfiedIcon from '@material-ui/icons/SentimentSatisfied';\nimport MoodBadIcon from '@material-ui/icons/MoodBad';\nimport { Difficulty } from '../../store/state';\n\ninterface IDifficult {\n    icon: OverridableComponent<SvgIconTypeMap>,\n    color: string,\n}\n\ninterface IDifficultMap {\n    easy: IDifficult,\n    medium: IDifficult,\n    hard: IDifficult,\n}\n\nconst iconsByDifficult: IDifficultMap = {\n  easy: {\n    icon: InsertEmoticonIcon, color: 'green',\n  },\n  medium: {\n    icon: SentimentSatisfiedIcon, color: 'blue',\n  },\n  hard: {\n    icon: MoodBadIcon, color: 'red',\n  },\n};\n\ninterface IDifficultIconProps {\n    difficulty: Difficulty\n}\n\nconst DifficultIcon = (props: IDifficultIconProps) => {\n  const { difficulty } = props;\n  const { icon: Icon, color } = iconsByDifficult[difficulty];\n  return <Icon htmlColor={color} />;\n};\n\nexport default DifficultIcon;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { IAnswerGroup, IOnInputAnswer } from '../AnswersGroup/AnswerGroup';\nimport { IQuestion } from '../../store/state';\nimport RadioGroup from '../AnswersGroup/RadioGroup';\nimport CheckboxesGroup from '../AnswersGroup/CheckboxesGroup';\nimport QuestionCard from '../shared/Card';\nimport DifficultIcon from '../shared/DifficultIcon';\n\ninterface IQuestionProps {\n    question: IQuestion,\n    onSelected: IOnInputAnswer\n    selectedAnswers: string[]\n    correctAnswers: string[] | null\n    isCorrect: boolean | null\n}\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ControlPanel = styled.div`\n  width: 100%;\n`;\n\nconst QuestionText = styled.p`\n  text-align: center;\n`;\n\nexport default function Question(props: IQuestionProps) {\n  const {\n    question,\n    onSelected,\n    selectedAnswers,\n    correctAnswers,\n    isCorrect,\n  } = props;\n  const AnswerGroup: IAnswerGroup = question.type === 'multiple' ? CheckboxesGroup : RadioGroup;\n  const answers = question.incorrect_answers.concat(question.correct_answer).sort();\n\n  return (\n    <QuestionCard\n      isCorrect={isCorrect}\n    >\n      <Content>\n        <DifficultIcon difficulty={question.difficulty} />\n        <QuestionText>{question.question}</QuestionText>\n      </Content>\n      <ControlPanel>\n        <AnswerGroup\n          answers={answers}\n          correctAnswers={correctAnswers}\n          value={selectedAnswers}\n          onInput={onSelected}\n        />\n      </ControlPanel>\n    </QuestionCard>\n  );\n}\n","import { IAnswer, IQuestion } from '../../../store/state';\n\ninterface IQuestionResult {\n    question: IQuestion\n    answer: IAnswer\n    result: boolean\n}\n\nclass QuestionResult implements IQuestionResult {\n    public result: boolean\n\n    constructor(public question: IQuestion, public answer: IAnswer) {\n      this.result = answer.value.length === 1 && question.correct_answer === answer.value[0];\n    }\n}\n\nexport default QuestionResult;\n","import { Difficulty, IQuestion } from '../../../store/state';\nimport QuestionResult from './QuestionResult';\nimport { IQuestionnaireData } from '../Results';\n\nexport interface IInfo {\n    correct: number,\n    incorrect: number\n}\n\nclass QuestionResultsProvider {\n    public results: QuestionResult[];\n\n    constructor(data: IQuestionnaireData) {\n      const { questions, answers } = data;\n      const getResult = (\n        question: IQuestion,\n        i: number,\n      ) => new QuestionResult(question, answers[i]);\n\n      this.results = questions\n        .map(getResult)\n        .sort((aResult, bResult) => {\n          const { difficulty: aDifficulty } = aResult.question;\n          const { difficulty: bDifficulty } = bResult.question;\n          if (aDifficulty === bDifficulty) return 0;\n          if (aDifficulty === 'easy') return -1;\n          if (aDifficulty === 'medium' && bDifficulty !== 'easy') return -1;\n          return 1;\n        });\n    }\n\n    public getInfo(difficulty?: Difficulty): IInfo {\n      const reducer = (info: IInfo, result: QuestionResult) => {\n        const key = result.result ? 'correct' : 'incorrect';\n        return { ...info, [key]: info[key] + 1 };\n      };\n      return this.getResults(difficulty).reduce(reducer, { correct: 0, incorrect: 0 });\n    }\n\n    public getResults(difficulty?: Difficulty) {\n      if (typeof difficulty === 'undefined') {\n        return this.results;\n      }\n      return this.results.filter(({ question }) => question.difficulty === difficulty);\n    }\n}\n\nexport default QuestionResultsProvider;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Card from '../shared/Card';\nimport DifficultIcon from '../shared/DifficultIcon';\nimport QuestionResultsProvider, { IInfo } from './QuestionResultsProvider/QuestionResultsProvider';\nimport { Difficulty } from '../../store/state';\n\ninterface IResultsInfoProps {\n    resultProvider: QuestionResultsProvider;\n}\n\n// eslint-disable-next-line no-unused-vars\nconst ResultRow = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\n\nconst Result = styled.p`\nmargin-left: 10px;\n  text-align: center;\n`;\n\nconst getResultInfo = (resultProvider: QuestionResultsProvider, difficulty?: Difficulty) => {\n  const { correct, incorrect }: IInfo = resultProvider.getInfo(difficulty);\n  const total = correct + incorrect;\n  const percent = total !== 0 ? (100 / total) * correct : 100;\n  return `${correct}/${total} (${Math.round(percent)}%)`;\n};\n\nconst ResultsInfo = (props: IResultsInfoProps) => {\n  const { resultProvider } = props;\n\n  const getInfo = getResultInfo.bind(null, resultProvider);\n\n  const { correct, incorrect } = resultProvider.getInfo();\n\n  return (\n    <Card isCorrect={correct >= incorrect}>\n      Total:\n      { getInfo() }\n      <ResultRow>\n        <DifficultIcon difficulty=\"easy\" />\n        <Result>{ getInfo('easy') }</Result>\n      </ResultRow>\n      <ResultRow>\n        <DifficultIcon difficulty=\"medium\" />\n        <Result>{ getInfo('medium') }</Result>\n      </ResultRow>\n      <ResultRow>\n        <DifficultIcon difficulty=\"hard\" />\n        <Result>{ getInfo('hard') }</Result>\n      </ResultRow>\n    </Card>\n  );\n};\n\nexport default ResultsInfo;\n","import React from 'react';\nimport { IQuestion, IAnswer } from '../../store/state';\nimport Question from '../Question/Question';\nimport QuestionResultsProvider from './QuestionResultsProvider/QuestionResultsProvider';\nimport QuestionResult from './QuestionResultsProvider/QuestionResult';\nimport ResultsInfo from './ResultsInfo';\n\nexport interface IQuestionnaireData {\n  questions: IQuestion[]\n  answers: IAnswer[]\n}\n\nexport default function Results(props: IQuestionnaireData) {\n  const { questions, answers } = props;\n  const resultsProvider = new QuestionResultsProvider({ questions, answers });\n  return (\n    <div>\n      <ResultsInfo resultProvider={resultsProvider} />\n      { resultsProvider.results.map((result: QuestionResult) => (\n        <Question\n          key={result.question.question}\n          question={result.question}\n          selectedAnswers={result.answer.value}\n          correctAnswers={[result.question.correct_answer]}\n          isCorrect={result.result}\n          onSelected={() => {}}\n        />\n      )) }\n    </div>\n  );\n}\n","import { AnyAction } from 'redux';\nimport axios from 'axios';\nimport { ThunkAction } from 'redux-thunk';\nimport { IQuestion, IState } from './state';\n\nexport const SET_QUESTIONS = Symbol('SET_QUESTIONS');\nexport const ADD_ANSWER = Symbol('ADD_ANSWER');\n\ninterface ISetQuestions extends AnyAction {\n    payload: IQuestion[]\n}\n\nexport interface IFetchQuestions {\n    (): ThunkAction<void, IState, void, ISetQuestions>\n}\n\ninterface IFetchQuestionsResponse {\n    results: IQuestion[]\n    response_code: number\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport const fetchQuestions: IFetchQuestions = () => async (dispatch) => {\n  const { data: { results: questions } } = await axios.get<IFetchQuestionsResponse>('https://opentdb.com/api.php?amount=5');\n  dispatch({\n    type: SET_QUESTIONS,\n    payload: questions,\n  });\n};\n\nexport const addAnswer = (value: string[]) => ({\n  type: ADD_ANSWER,\n  payload: { value },\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Button, CircularProgress } from '@material-ui/core';\nimport Question from './Question/Question';\nimport Results from './Results/Results';\nimport { IQuestion, IAnswer, IState } from '../store/state';\nimport { fetchQuestions, addAnswer } from '../store/actions';\n\ninterface IQuestionnaireProps {\n  questions: IQuestion[]\n  answers: IAnswer[]\n  isLoading: Boolean\n  fetchQuestions: Function\n  addAnswer: Function\n}\n\nconst Questionnaire = (\n  {\n    questions,\n    answers,\n    isLoading,\n    fetchQuestions: fetch,\n    addAnswer: onSubmit,\n  }: IQuestionnaireProps,\n) => {\n  const question = questions[answers.length];\n  const [selectedAnswers, setSelectedAnswers] = useState<string[]>([]);\n\n  useEffect(() => { fetch(); }, []);\n  useEffect(() => { setSelectedAnswers([]); }, [question]);\n\n  if (isLoading) {\n    return <CircularProgress size={100} />;\n  }\n\n  if (questions.length === answers.length) {\n    return (\n      <Results\n        answers={answers}\n        questions={questions}\n      />\n    );\n  }\n\n  return (\n    <div>\n      <Question\n        question={question}\n        selectedAnswers={selectedAnswers}\n        onSelected={setSelectedAnswers}\n        correctAnswers={null}\n        isCorrect={null}\n      />\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        fullWidth\n        onClick={() => { onSubmit(selectedAnswers); }}\n        disabled={!selectedAnswers.length}\n      >\n        next\n      </Button>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ questions, answers, isLoading }: IState) => ({\n  questions,\n  answers,\n  isLoading,\n});\nconst mapDispatchToProps = { fetchQuestions, addAnswer };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questionnaire);\n","import React from 'react';\nimport styled from 'styled-components';\nimport Questionnaire from './components/Questionnaire';\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport default function App() {\n  return (\n    <Container>\n      <Questionnaire />\n    </Container>\n  );\n}\n","export type Difficulty = 'easy' | 'medium' | 'hard'\n\nexport interface IQuestion {\n    category: string\n    type: 'multiple' | 'boolean'\n    difficulty: Difficulty\n    question: string,\n    // eslint-disable-next-line camelcase\n    correct_answer: string\n    // eslint-disable-next-line camelcase\n    incorrect_answers: string[]\n}\n\nexport interface IAnswer {\n   value: string[]\n}\n\nexport interface IState {\n    questions: IQuestion[],\n    answers: IAnswer[]\n    isLoading: boolean\n}\n\nexport const state: IState = {\n  questions: [],\n  answers: [],\n  isLoading: true,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\nimport reducer from './reducer';\nimport { IState } from './state';\n\ndeclare let window: any;\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk as ThunkMiddleware<IState, any>),\n);\n\nwindow.store = store;\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\nexport default store;\n","import { AnyAction } from 'redux';\nimport { state as defaultState } from './state';\nimport { SET_QUESTIONS, ADD_ANSWER } from './actions';\n\nexport default function reducer(state = defaultState, action: AnyAction) {\n  if (action.type === SET_QUESTIONS) {\n    return {\n      ...state,\n      questions: action.payload,\n      isLoading: false,\n    };\n  }\n  if (action.type === ADD_ANSWER) {\n    return {\n      ...state,\n      answers: state.answers.concat(action.payload),\n    };\n  }\n  return state;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}